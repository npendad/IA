import os
import joblib
import pandas as pd
import streamlit as st
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, recall_score, confusion_matrix, classification_report

# Constantes
MODEL_PATH = 'random_forest_model.pkl'
FEATURES_LIST = [
    'AddressOfEntryPoint', 'MajorLinkerVersion', 'MajorImageVersion', 
    'MajorOperatingSystemVersion', 'DllCharacteristics', 'SizeOfStackReserve', 'NumberOfSections'
]

# Fonction pour entra√Æner et sauvegarder le mod√®le
def train_and_save_model():
    """Entra√Æner et sauvegarder un mod√®le RandomForestClassifier."""
    st.info("Entra√Ænement du mod√®le, veuillez patienter...")

    # Chargement des donn√©es
    data = pd.read_csv("DatasetmalwareExtrait.csv")
    X = data.drop(['legitimate'], axis=1)
    y = data['legitimate']

    # Entra√Ænement du mod√®le
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
    model = RandomForestClassifier(
        n_estimators=196, random_state=42, criterion="gini", max_depth=25, 
        min_samples_split=4, min_samples_leaf=1
    )
    model.fit(X_train, y_train)

    # √âvaluation du mod√®le
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    recall = recall_score(y_test, y_pred, average='weighted')

    # Sauvegarde du mod√®le
    joblib.dump(model, MODEL_PATH)

    # Affichage des m√©triques
    st.success(f"Pr√©cision du mod√®le : {accuracy:.3f}")
    st.success(f"Rappel du mod√®le : {recall:.3f}")

    # Graphique de matrice de confusion
    st.subheader("Matrice de confusion")
    cm = confusion_matrix(y_test, y_pred)
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
    plt.xlabel("Pr√©dictions")
    plt.ylabel("V√©rit√©s terrain")
    st.pyplot(plt)

    return model, accuracy, recall

# Fonction pour charger ou entra√Æner le mod√®le
def load_or_train_model():
    """Charger le mod√®le si existant, sinon entra√Æner et sauvegarder."""
    if os.path.exists(MODEL_PATH):
        st.success("Mod√®le existant trouv√©, chargement en cours...")
        model = joblib.load(MODEL_PATH)
        return model, None, None
    else:
        return train_and_save_model()

# Fonction pour traiter un fichier CSV ou Excel
def process_file(file, model):
    """Traiter un fichier .csv ou .xlsx et effectuer l'analyse."""
    try:
        # Lire le fichier en tant que dataframe pandas
        if file.name.endswith('.csv'):
            data = pd.read_csv(file)
        elif file.name.endswith('.xlsx'):
            data = pd.read_excel(file)

        st.success(f"Fichier {file.name} charg√© avec succ√®s !")
        st.write("**Aper√ßu des donn√©es :**")
        st.dataframe(data.head())

        # V√©rifier si toutes les colonnes n√©cessaires sont pr√©sentes
        missing_features = [col for col in FEATURES_LIST if col not in data.columns]
        if missing_features:
            st.error(f"Colonnes manquantes : {missing_features}")
            return None

        # Pr√©dictions sur les donn√©es
        predictions = model.predict(data[FEATURES_LIST])
        data['Prediction'] = predictions

        st.write("**R√©sultats des pr√©dictions :**")
        st.dataframe(data[['Prediction']].value_counts().reset_index(name='Counts'))

        # Graphique des r√©sultats de pr√©dictions
        st.subheader("Distribution des Pr√©dictions")
        plt.figure(figsize=(6, 4))
        sns.countplot(data['Prediction'], palette="Set2")
        plt.title("Distribution des pr√©dictions (Malware vs L√©gitime)")
        plt.xlabel("Classe pr√©dite")
        plt.ylabel("Nombre de cas")
        st.pyplot(plt)

        return data

    except Exception as e:
        st.error(f"Erreur lors du traitement du fichier : {str(e)}")
        return None

# Interface utilisateur Streamlit
def main():
    st.sidebar.header("üõ°Ô∏è D√©tecteur de Malwares")
    st.sidebar.write("T√©l√©chargez un fichier CSV ou Excel pour analyser les donn√©es ou effectuer des pr√©dictions.")

    # Charger ou entra√Æner le mod√®le
    model, accuracy, recall = load_or_train_model()

    # T√©l√©chargement de fichier CSV ou Excel
    uploaded_file = st.file_uploader("T√©l√©chargez un fichier CSV ou Excel", type=["csv", "xlsx"])

    if uploaded_file is not None:
        # Affichage de l'√©tat d'analyse
        st.info("Analyse en cours...")

        # Effectuer l'analyse du fichier t√©l√©charg√©
        processed_data = process_file(uploaded_file, model)

        # Apr√®s l'analyse, permettre un nouveau t√©l√©chargement de fichier
        if processed_data is not None:
            st.success("Analyse termin√©e avec succ√®s !")

if __name__ == "__main__":
    main()

